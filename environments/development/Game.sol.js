"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var factory = function factory(Pudding) {
  // Inherit from Pudding. The dependency on Babel sucks, but it's
  // the easiest way to extend a Babel-based class. Note that the
  // resulting .js file does not have a dependency on Babel.

  var Game = (function (_Pudding) {
    _inherits(Game, _Pudding);

    function Game() {
      _classCallCheck(this, Game);

      _get(Object.getPrototypeOf(Game.prototype), "constructor", this).apply(this, arguments);
    }

    return Game;
  })(Pudding);

  ;

  // Set up specific data for this class.
  Game.abi = [{ "constant": true, "inputs": [], "name": "adventurer_level", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": true, "inputs": [], "name": "won", "outputs": [{ "name": "", "type": "bool" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "squares", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "target", "type": "uint16" }], "name": "allow_move", "outputs": [], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "monster_square", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": true, "inputs": [], "name": "player", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "character", "type": "uint16" }, { "name": "_player", "type": "address" }, { "name": "_levels", "type": "address[]" }], "name": "initialize", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "adventurer_hp", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": true, "inputs": [], "name": "over", "outputs": [{ "name": "", "type": "bool" }], "type": "function" }, { "constant": true, "inputs": [], "name": "adventurer_attack", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "monster_attack", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "levels", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "direction", "type": "uint16" }], "name": "move", "outputs": [], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "monster_hp", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": true, "inputs": [], "name": "level_number", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": false, "inputs": [], "name": "get_all_squares", "outputs": [{ "name": "", "type": "uint16[160]" }], "type": "function" }, { "constant": true, "inputs": [], "name": "equipped_item", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "inputs": [], "type": "constructor" }];
  Game.binary = "";

  if ("" != "") {
    Game.address = "";

    // Backward compatibility; Deprecated.
    Game.deployed_address = "";
  }

  Game.generated_with = "1.0.2";
  Game.contract_name = "Game";

  return Game;
};

// Nicety for Node.
factory.load = factory;

if (typeof module != "undefined") {
  module.exports = factory;
} else {
  // There will only be one version of Pudding in the browser,
  // and we can use that.
  window.Game = factory;
}