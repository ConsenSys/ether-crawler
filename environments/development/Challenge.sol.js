"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var factory = function factory(Pudding) {
  // Inherit from Pudding. The dependency on Babel sucks, but it's
  // the easiest way to extend a Babel-based class. Note that the
  // resulting .js file does not have a dependency on Babel.

  var Challenge = (function (_Pudding) {
    _inherits(Challenge, _Pudding);

    function Challenge() {
      _classCallCheck(this, Challenge);

      _get(Object.getPrototypeOf(Challenge.prototype), "constructor", this).apply(this, arguments);
    }

    return Challenge;
  })(Pudding);

  ;

  // Set up specific data for this class.
  Challenge.abi = [{ "constant": false, "inputs": [{ "name": "_level", "type": "address" }], "name": "add_level", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "started", "outputs": [{ "name": "", "type": "bool" }], "type": "function" }, { "constant": false, "inputs": [], "name": "accept", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "best_offer", "outputs": [{ "name": "sender", "type": "address" }, { "name": "value", "type": "uint256" }], "type": "function" }, { "constant": false, "inputs": [], "name": "make_offer", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "player", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": true, "inputs": [], "name": "character", "outputs": [{ "name": "", "type": "uint16" }], "type": "function" }, { "constant": false, "inputs": [], "name": "claim", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "bet_value", "outputs": [{ "name": "", "type": "uint256" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_gamebuilder", "type": "address" }], "name": "set_gamebuilder", "outputs": [], "type": "function" }, { "constant": false, "inputs": [], "name": "num_levels", "outputs": [{ "name": "", "type": "uint256" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_levels", "type": "address[]" }], "name": "add_levels", "outputs": [], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "levels", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": true, "inputs": [], "name": "game", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": true, "inputs": [], "name": "gamebuilder", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "inputs": [{ "name": "_registry", "type": "address" }, { "name": "_character", "type": "uint16" }], "type": "constructor" }];
  Challenge.binary = "606060408181528061098c833960a090525160805160088054600160a060020a03199081168417918290556001805461ffff191684179055346002819055600380549092163317918290557f6d705ebb0000000000000000000000000000000000000000000000000000000060a0908152600160a060020a0392831660a45260c491909152911690636d705ebb9060e4906020906044816000876161da5a03f1156002575050604051516009555050506108cf806100bd6000396000f3606060405236156100b95760e060020a60003504630dd20d3381146100bb5780631f2698ab1461010d5780632852b71c146101195780632e286683146102875780633ced842b1461029e57806348db5f89146102b45780634d2e03a0146102c65780634e71d92d146102d35780635b86914d1461033f5780635f723afe146103485780638365172c146103f05780638f20742314610406578063b2596a67146104a6578063c3fe3e28146104d9578063d554e19a146104eb575b005b6100b9600435600080546001810180835583929190829082801582901161055d5782805261055d906000805160206108af8339815191529081019083015b808211156105df57600081556001016100f9565b6103f460065460ff1681565b6100b9600354600160a060020a039081169033168114156105dc576006805460ff19166001179055604080516008546009547f19b05f4900000000000000000000000000000000000000000000000000000000835260048301529151600160a060020a0392909216916319b05f4991602481810192600092909190829003018183876161da5a03f1156100025750506040516007546003546001547f697b817c00000000000000000000000000000000000000000000000000000000845261ffff1660048401818152600160a060020a0392831660248601819052606060448701908152600080546064890181905296909516975063697b817c969395919493909160849091019084908015610262579080526020028101906000805160206108af833981519152905b8154600160a060020a0316815260019190910190602001808311610243575b50509450505050506000604051808303816000876161da5a03f1156100025750505050565b60045460055461050291600160a060020a03169082565b6100b960065460ff166001141561066857610755565b610528600354600160a060020a031681565b61054560015461ffff1681565b6100b96000600060006000600760009054906101000a9004600160a060020a0316600160a060020a0316637eaef50c6040518160e060020a0281526004018090506020604051808303816000876161da5a03f115610002575050604051518214159050610757576108a9565b6103f460025481565b6006805474ffffffffffffffffffffffffffffffffffffffff001916600480356101008181029390931793849055604080517f42909a9e00000000000000000000000000000000000000000000000000000000815290516100b9959294909204600160a060020a0316926342909a9e92828201926020929082900301816000876161da5a03f1156100025750506040515160078054600160a060020a03191690911790555050565b6000545b60408051918252519081900360200190f35b604080516004803580820135602081810285810182019096528185526100b9959394602494909385019291829190850190849080828437509496505050505050506000805482518083558280526000805160206108af833981519152918201916020850182156105e3579160200282015b828111156105e35781548351600160a060020a0319919091161782556020929092019160019190910190610477565b610528600435600080548290811015610002575080526000805160206108af8339815191520154600160a060020a031681565b610528600754600160a060020a031681565b6105286006546101009004600160a060020a031681565b6040518083600160a060020a031681526020018281526020019250505060405180910390f35b60408051600160a060020a03929092168252519081900360200190f35b6040805161ffff929092168252519081900360200190f35b505050815481101561000257600091825260208220018054600160a060020a03191690921790915560408051825460085460095460e160020a63235af101028452600484015260248301919091529151600160a060020a0392909216926346b5e20292604483810193829003018183876161da5a03f115610002575050505b50565b5090565b506106099291505b808211156105df578054600160a060020a03191681556001016105eb565b5050604080516000805460085460095460e160020a63235af101028552600485015260248401919091529251600160a060020a0393909316926346b5e202926044818101939291829003018183876161da5a03f1156100025750505050565b60055434111561073457600454604051600554600160a060020a03929092169160009182818181858883f15060408181018152338083523460209390930183905260048054600160a060020a0319169091178155600583905581516008546009547fbfad16f40000000000000000000000000000000000000000000000000000000083529282019290925260248101939093529051600160a060020a0391909116945063bfad16f493604483810194509092829003018183876161da5a03f11561000257505050610755565b60405133600160a060020a031690600090349082818181858883f150505050505b565b505060008054600a30600160a060020a031680319190910481310394503184900392508204905b6000548110156107fe57600080548290811015610002578180526000805160206108af83398151915201909054906101000a9004600160a060020a0316600160a060020a03166321970c0c836040518260e060020a02815260040180905060006040518083038185886185025a03f115610002575050505060010161077e565b600760009054906101000a9004600160a060020a0316600160a060020a03166312c8052f6040518160e060020a0281526004018090506020604051808303816000876161da5a03f1156100025750506040515160011415905061088357604051600354600160a060020a031690600090869082818181858883f19350505050506108a9565b600454604051600160a060020a039190911690600090869082818181858883f150505050505b5050505056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563";

  if ("" != "") {
    Challenge.address = "";

    // Backward compatibility; Deprecated.
    Challenge.deployed_address = "";
  }

  Challenge.generated_with = "1.0.2";
  Challenge.contract_name = "Challenge";

  return Challenge;
};

// Nicety for Node.
factory.load = factory;

if (typeof module != "undefined") {
  module.exports = factory;
} else {
  // There will only be one version of Pudding in the browser,
  // and we can use that.
  window.Challenge = factory;
}